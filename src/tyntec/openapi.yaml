openapi: '3.0.0'
info:
  title: Conversations
  contact:
    name: tyntec API Support
    url: http://www.tyntec.com/support
    email: support@tyntec.com
  version: '3.0'
  x-repository: https://github.com/tyntec/api-collection/blob/master/conversations
  x-major-version: v3
  x-postman-collection: postman.zip
servers:
  - url: https://api.tyntec.com/conversations/v3
security:
  - ApiKeyAuth: []
tags:
  - name: 'API Account Configurations'
    description: |
      API Account configurations allow you to configure settings global to your API account.
  - name: 'Channel Configurations'
    description: |
      Channel Account configurations allow you to configure settings local to a specific channel.
      A channel here is referred to as the identity you use to send messages to your clients.
paths:
  # Messaging
  /messages:
    post:
      operationId: sendMessage
      summary: Send a message
      tags:
        - 'Messaging'
      description: Send chat messages via this path.
      requestBody:
        description: The message you would like to send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
      responses:
        202:
          description: The message is accepted by our system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Default'

  # Webhooks
  /configurations:
    get:
      tags:
        - 'API Account Configurations'
      summary: Get account configuration
      operationId: getAccountConfiguration
      description: Returns the configuration of the API account
      responses:
        200:
          description: The configuration of the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
  /configurations/callbacks:
    put:
      tags:
        - 'API Account Configurations'
      summary: Update the callback
      operationId: updateAccountCallback
      description: Update the callback settings of the account. **Note** The complete object must be provided
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Callback'
      responses:
        200:
          description: The configuration of the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
  /configurations/mediaCredentials:
    put:
      tags:
        - 'API Account Configurations'
      summary: Update the media credentials
      operationId: updateAccountMediaCredentialsCallback
      description: Update the media credentials of the account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaCredentials'
      responses:
        200:
          description: The configuration of the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
    delete:
      tags:
        - 'API Account Configurations'
      summary: Remove the media credentials
      operationId: removeAccountMediaCredentials
      description: Remove the media credentials of the account.
      responses:
        200:
          description: The configuration of the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
  /configurations/channels:
    get:
      tags:
        - 'Channel Configurations'
      summary: List all channels
      operationId: listAllChannels
      description: List all channels available to your API account
      responses:
        200:
          $ref: '#/components/responses/ListAllChannelsResponse'
  /configurations/channels/sms:
    get:
      tags:
        - 'Channel Configurations'
      summary: List all SMS channels
      operationId: listAllSMSChannels
      description: List all Inbound SMS channels available to your API account
      responses:
        200:
          $ref: '#/components/responses/ListAllSMSChannelsResponse'
  /configurations/channels/telegram:
    get:
      tags:
        - 'Channel Configurations'
      summary: List all Telegram channels
      operationId: listAllTelegramChannels
      description: List all Telegram channels available to your API account
      responses:
        200:
          $ref: '#/components/responses/ListAllTelegramChannelsResponse'
  /configurations/channels/mms:
    get:
      tags:
        - 'Channel Configurations'
      summary: List all Mms channels
      operationId: listAllMmsChannels
      description: List all Mms channels available to your API account
      responses:
        200:
          $ref: '#/components/responses/ListAllMmsChannelsResponse'
  /configurations/channels/viber:
    get:
      tags:
        - 'Channel Configurations'
      summary: List all Viber channels
      operationId: listAllViberChannels
      description: List all Viber channels available to your API account
      responses:
        200:
          $ref: '#/components/responses/ListAllViberChannelsResponse'
  /configurations/channels/wechat:
    get:
      tags:
        - 'Channel Configurations'
      summary: List all WeChat channels
      operationId: listAllWeChatChannels
      description: List all WeChat channels available to your API account
      responses:
        200:
          $ref: '#/components/responses/ListAllWeChatChannelsResponse'
  /configurations/channels/whatsapp:
    get:
      tags:
        - 'Channel Configurations'
      summary: List all WhatsApp channels
      operationId: listAllWhatsAppChannels
      description: List all WhatsApp channels available to your API account
      responses:
        200:
          $ref: '#/components/responses/ListAllWhatsAppChannelsResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
      description: |
        The API key used for this operation. We check as well that the API key has the phone number
        (either on sending messages or interacting with other phone number based features) assigned.

  responses:
    # Shared
    Default:
      description: The default response in case of any other error. Please check the error object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    BadRequest:
      description: The request does not match our expectations. Please check the Problems object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            status: 400
            violations:
              [
                {
                  field: validate.request.whatsapp.contentType,
                  message: must not be empty,
                },
              ]
            title: Constraint Violation
    Forbidden:
      description: You attempting to use a number that is not assigned to your account
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://httpstatuses.com/403
            title: Forbidden
            status: 403

    # Webhooks
    ListAllChannelsResponse:
      description: A list of all channel configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllChannelResponses'
    ListAllSMSChannelsResponse:
      description: A list of SMS channel configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SMSChannelResponses'
    ListAllTelegramChannelsResponse:
      description: A list of Telegram channel configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TelegramChannelResponses'
    ListAllMmsChannelsResponse:
      description: A list of Mms channel configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MmsChannelResponses'
    ListAllViberChannelsResponse:
      description: A list of Viber channel configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ViberChannelResponses'
    ListAllWeChatChannelsResponse:
      description: A list of WeChat channel configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WeChatChannelResponses'
    ListAllWhatsAppChannelsResponse:
      description: A list of Whatsapp channel configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WhatsAppChannelResponses'

  schemas:
    # Messaging
    MessageRequest:
      type: object
      description: The message you would like to send
      required:
        - to
        - from
        - channel
      properties:
        to:
          type: string
          description: |
            The message's recipient
            The format depends on the specific channel
          example: '+1233423454'
        from:
          type: string
          description: |
            The sender of the messages. The format depends on the specific channel.
          example: '+1233423454'
        channel:
          type: string
          description: The channel selected for delivery.
          example: sms
          items:
            type: string
            enum:
              - sms
              - whatsapp
              - wechat
              - viber
        overrides:
          $ref: '#/components/schemas/MessageRequestOverrides'
        context:
          type: string
          description: The context for this particular message
          maxLength: 125
        content:
          AnyValue: {}
      example:
        to: '+123234234'
        from: '545345345'
        channel: 'whatsapp'
        whatsapp:
          contentType: text
          text: A simple text message
    MessageRequestOverrides:
      type: object
      description: Overrides of defaults for this message
      properties:
        notificationCallbackUrl:
          type: string
          pattern: ^https:\/\/?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$
          description: |
            When present this url is used for sending the delivery notifications to your webhook.
            Can be used for debugging use cases or individual routings.
          example: https://en4u5fpprib5i.x.pipedream.net
    MessageResponse:
      type: object
      description: The response after the server has accepted the request
      required:
        - messageId
        - acceptedAt
      properties:
        messageId:
          type: string
          format: uuid
          description: Global Message Id reference
          example: 77185196-664a-43ec-b14a-fe97036c697f
        acceptedAt:
          type: string
          format: date-time
          description: Point in time when the API confirms that the message request was accepted

    # Shared
    Problem:
      type: object
      additionalProperties: true
      description: The problem object follows the RFC-7807 (https://tools.ietf.org/html/rfc7807)
      properties:
        type:
          description: A URI reference [RFC3986] that identifies the problem type
          example: https://docs.tyntec.com/problems/DataNotParseable
          type: string
        title:
          type: string
          example: Data given was not parseable
          description: A short, human-readable summary of the problem type.
        status:
          description: The HTTP status code (RFC7231, Section 6) generated by the origin server for this occurrence of the problem.
          type: number
          example: 400
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: |
            Unexpected end-of-input: expected close marker for Object (start marker at [Source: UNKNOWN; line: -1, column: -1) at [Source: UNKNOWN; line: 1, column: 97]

    # Webhooks
    AccountConfiguration:
      type: object
      description: A configuration of an API account
      properties:
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/AccountScopes'
        callback:
          $ref: '#/components/schemas/Callback'
        config:
          $ref: '#/components/schemas/DetailedAccountConfig'
    AccountScopes:
      type: string
      description: Scopes available to your account.
      enum:
        - channels:read
        - channels.telegram:write
        - channels.wechat:write
        - callbacks:read
        - callbacks:write
        - credentials:read
        - credentials:write
        - media:read
        - media:write
    Callback:
      type: object
      description: A configuration of callbacks to your system
      properties:
        callbackVersion:
          type: string
          description: The event version to be used.
          enum:
            - '2.11'
            - '2.12'
          default: '2.12'
        signature:
          $ref: '#/components/schemas/Signature'
        header:
          $ref: '#/components/schemas/Header'
        inboundMessageUrl:
          type: string
          description: A webhook for events related to inbound messages
          pattern: '^https://.*'
          maxLength: 2000
        messageStatusUrl:
          type: string
          description: A webhook for events related to message status changes
          pattern: '^https://.*'
          maxLength: 2000
        eventFilter:
          type: array
          description: |
            A list of status events to listen to. If empty, all events are submitted.
          items:
            $ref: '#/components/schemas/EventTypes'
          minLength: 0
          default: []
    EventTypes:
      type: string
      description: Determines which kind of event is emitted by the API
      enum:
        - MessageStatus::accepted
        - MessageStatus::channelFailed
        - MessageStatus::deleted
        - MessageStatus::delivered
        - MessageStatus::failed
        - MessageStatus::seen
        - MessageStatus::unknown
    Signature:
      type: object
      description: |
        A signature configuration for incoming events. Can be disabled by setting the
        signature property to empty.
      required:
        - secret
        - method
      properties:
        secret:
          type: string
          description: A shared secret key
          minLength: 8
          maxLength: 125
        method:
          type: string
          description: A cryptographic algorithm used for signature calculation
          enum:
            - HS256
            - HS512
    Header:
      type: object
      description: |
        An additional custom header to be sent with the event transmission. Can be used for setting
        authentication tokens, or similar.
      required:
        - key
        - value
      properties:
        key:
          description: The name of the HTTP header
          type: string
          minLength: 4
          maxLength: 125
        value:
          type: string
          description: The value of the HTTP header
          minLength: 8
          maxLength: 1024
    DetailedAccountConfig:
      type: object
      properties:
        mediaCredentials:
          $ref: '#/components/schemas/MediaCredentials'
    MediaCredentials:
      type: object
      description: Credentials to download media from your remote service
      oneOf:
        - $ref: '#/components/schemas/OAuth2MediaCredentials'
        - $ref: '#/components/schemas/BasicMediaCredentials'
    OAuth2MediaCredentials:
      type: object
      description: Oauth 2 credentials. **Only** supports _client secret_ flow
      properties:
        type:
          type: string
          description: Determines the type of credentials. Always _oauth2_.
          enum:
            - oauth2
        oauth2:
          type: object
          required:
            - clientId
            - clientSecret
            - url
          properties:
            clientId:
              type: string
            clientSecret:
              type: string
            url:
              type: string
    BasicMediaCredentials:
      type: object
      properties:
        type:
          type: string
          description: Determines the type of credentials. Always _basic_.
          enum:
            - basic
        basic:
          type: object
          required:
            - username
            - password
          properties:
            username:
              type: string
            password:
              type: string

    AllChannelResponses:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/SMSChannelResponse'
          - $ref: '#/components/schemas/TelegramChannelResponse'
          - $ref: '#/components/schemas/MmsChannelResponse'
          - $ref: '#/components/schemas/ViberChannelResponse'
          - $ref: '#/components/schemas/WeChatChannelResponse'
          - $ref: '#/components/schemas/WhatsAppChannelResponse'
    ChannelResponse:
      type: object
      description: General channel configuration
      properties:
        channel:
          type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ChannelScopes'
        callback:
          $ref: '#/components/schemas/ChannelCallback'
        name:
          type: string
          maxLength: 256
    ChannelScopes:
      type: string
      description: Scopes available to a channel.
      enum:
        - channels:read
        - channels.telegram:write
        - channels.wechat:write
        - callbacks:read
        - callbacks:write
        - media:read
        - media:write
    ChannelCallback:
      type: object
      description: A configuration of callbacks to your system
      properties:
        callbackVersion:
          type: string
          description: The event version to be used.
          enum:
            - '2.11'
        inboundMessageUrl:
          type: string
          description: A webhook for events related to inbound messages
          pattern: '^https://.*'
          maxLength: 2000
        messageStatusUrl:
          type: string
          description: A webhook for events related to message status changes
          pattern: '^https://.*'
          maxLength: 2000
        eventFilter:
          type: array
          description: |
            A list of status events to listen to. If empty, all events are submitted.
          items:
            $ref: '#/components/schemas/EventTypes'
          minLength: 0
          default: []
    WeChatChannelResponses:
      type: array
      items:
        $ref: '#/components/schemas/WeChatChannelResponse'
    WeChatChannelResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ChannelResponse'
      properties:
        id:
          $ref: '#/components/schemas/WeChatId'
        credentials:
          $ref: '#/components/schemas/WeChatCredentials'
      example:
        channel: wechat
        scopes:
          - messages:read
          - callbacks:write
          - callbacks:read
        id:
          weChatId: '12341234'
        name: your application
        credentials:
          appId: '12334'
          appSecret: 98ujhkjnvjhb832rbnj
        callback:
          callbackVersion: '2.11'
          inboundMessageUrl: https://your.server.com/inbound
          messageStatusUrl: https://your.server.com/status
          eventFilter:
            - MessageStatus::accepted
            - MessageStatus::dispatched
    TelegramChannelResponses:
      type: array
      items:
        $ref: '#/components/schemas/TelegramChannelResponse'
    TelegramChannelResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ChannelResponse'
      properties:
        id:
          $ref: '#/components/schemas/TelegramId'
        credentials:
          $ref: '#/components/schemas/TelegramCredentials'
      example:
        channel: telegram
        scopes:
          - messages:read
          - callbacks:write
          - callbacks:read
        id:
          botId: '12341234'
        name: your bot!
        credentials:
          botToken: 987923hrbnhjfedf87z324:fsdhf8n2r543j4hgr
        callback:
          callbackVersion: '2.11'
          inboundMessageUrl: https://your.server.com/inbound
          messageStatusUrl: https://your.server.com/status
          eventFilter:
            - MessageStatus::accepted
            - MessageStatus::dispatched
    MmsChannelResponses:
      type: array
      items:
        $ref: '#/components/schemas/MmsChannelResponse'
    MmsChannelResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ChannelResponse'
      properties:
        id:
          $ref: '#/components/schemas/PhoneNumberId'
      example:
        channel: mms
        scopes:
          - messages:read
          - callbacks:write
          - callbacks:read
        id:
          phoneNumber: '15559876543'
        name: your name
        callback:
          callbackVersion: '2.11'
          inboundMessageUrl: https://your.server.com/inbound
          messageStatusUrl: https://your.server.com/status
          eventFilter:
            - MessageStatus::accepted
            - MessageStatus::dispatched
    SMSChannelResponses:
      type: array
      items:
        $ref: '#/components/schemas/SMSChannelResponse'
    SMSChannelResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ChannelResponse'
      properties:
        id:
          $ref: '#/components/schemas/PhoneNumberId'
      example:
        channel: sms
        scopes:
          - messages:read
          - callbacks:write
          - callbacks:read
        id:
          phoneNumber: '12341234'
        callback:
          callbackVersion: '2.11'
          inboundMessageUrl: https://your.server.com/inbound
          messageStatusUrl: https://your.server.com/status
          eventFilter:
            - MessageStatus::accepted
            - MessageStatus::delivered
    WhatsAppChannelResponses:
      type: array
      items:
        $ref: '#/components/schemas/WhatsAppChannelResponse'
    WhatsAppChannelResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ChannelResponse'
      properties:
        id:
          $ref: '#/components/schemas/PhoneNumberId'
      example:
        channel: whatsapp
        scopes:
          - messages:read
          - profile:read
          - callbacks:write
          - callbacks:read
        id:
          phoneNumber: '12341234'
        callback:
          callbackVersion: '2.11'
          inboundMessageUrl: https://your.server.com/inbound
          messageStatusUrl: https://your.server.com/status
          eventFilter:
            - MessageStatus::accepted
            - MessageStatus::delivered
    ViberChannelResponses:
      type: array
      items:
        $ref: '#/components/schemas/ViberChannelResponse'
    ViberChannelResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ChannelResponse'
      properties:
        id:
          $ref: '#/components/schemas/ServiceId'
        config:
          $ref: '#/components/schemas/ViberChannelConfigs'
      example:
        channel: viber
        scopes:
          - messages:read
          - callbacks:write
          - callbacks:read
        id:
          serviceId: '1234'
        name: Your Company
        callback:
          callbackVersion: '2.11'
          inboundMessageUrl: https://your.server.com/inbound
          messageStatusUrl: https://your.server.com/status
          eventFilter:
            - MessageStatus::accepted
            - MessageStatus::delivered
    #
    # Channel id specs
    #
    PhoneNumberId:
      type: object
      description: The definition of the Phone Number Id
      properties:
        phoneNumber:
          type: string
    ServiceId:
      type: object
      description: The definition of the Viber Service id
      properties:
        serviceId:
          type: string
    WeChatId:
      type: object
      description: The definition of the WeChat id
      properties:
        weChatId:
          type: string

    TelegramId:
      type: object
      description: The definition of the Telegram id
      properties:
        botId:
          type: string

    #
    # Channel Credential Spec
    #
    WeChatCredentials:
      type: object
      properties:
        appId:
          type: string
        appSecret:
          type: string

    TelegramCredentials:
      type: object
      properties:
        botToken:
          type: string

    ViberChannelConfigs:
      type: object
      required:
        - serviceType
      properties:
        serviceType:
          type: string
          enum:
            - session
            - two-way
            - one-way
