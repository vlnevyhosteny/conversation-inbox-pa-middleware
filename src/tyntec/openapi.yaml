openapi: '3.0.0'
info:
  title: Conversations
  contact:
    name: tyntec API Support
    url: http://www.tyntec.com/support
    email: support@tyntec.com
  version: '3.0'
  x-repository: https://github.com/tyntec/api-collection/blob/master/conversations
  x-major-version: v3
  x-postman-collection: postman.zip
servers:
  - url: https://api.tyntec.com/conversations/v3
security:
  - ApiKeyAuth: []
tags:
  - name: 'API Account Configurations'
    description: |
      API Account configurations allow you to configure settings global to your API account.
  - name: 'Channel Configurations'
    description: |
      Channel Account configurations allow you to configure settings local to a specific channel.
      A channel here is referred to as the identity you use to send messages to your clients.
paths:
  # Messaging
  /messages:
    post:
      operationId: sendMessage
      summary: Send a message
      tags:
        - 'Messaging'
      description: Send chat messages via this path.
      requestBody:
        description: The message you would like to send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
      responses:
        202:
          description: The message is accepted by our system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Default'

  # Webhooks
  /configurations/channels/whatsapp/phone-numbers/{phone-number}/callbacks:
    parameters:
      - $ref: '#/components/parameters/PhoneNumber'
    put:
      tags:
        - 'Callback configuration'
      summary: Update the callback
      operationId: updateWhatsAppChannelCallback
      description: Update the callback settings of a specific phone number.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelCallback'
      responses:
        200:
          $ref: '#/components/schemas/WhatsAppChannelResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Default'

  /configurations/channels/sms/phone-numbers/{phone-number}/callbacks:
    parameters:
      - $ref: '#/components/parameters/PhoneNumber'
    put:
      tags:
        - 'Callback configuration'
      summary: Update the callback
      operationId: updateSMSChannelCallback
      description: Update the callback settings for a specific inbound phone number. **Note** The complete object must be provided
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelCallback'
      responses:
        200:
          $ref: '#/components/schemas/SMSChannelResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Default'

  /configurations/channels/viber/service-ids/{service-id}/callbacks:
    parameters:
      - $ref: '#/components/parameters/ServiceId'
    put:
      tags:
        - 'Callback configuration'
      summary: Update the callback
      operationId: updateViberChannelCallback
      description: Update the callback settings of a specific Service ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelCallback'
      responses:
        200:
          $ref: '#/components/schemas/ViberChannelResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Default'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
      description: |
        The API key used for this operation. We check as well that the API key has the phone number
        (either on sending messages or interacting with other phone number based features) assigned.

  responses:
    # Shared
    Default:
      description: The default response in case of any other error. Please check the error object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    BadRequest:
      description: The request does not match our expectations. Please check the Problems object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            status: 400
            violations:
              [
                {
                  field: validate.request.whatsapp.contentType,
                  message: must not be empty,
                },
              ]
            title: Constraint Violation
    Forbidden:
      description: You attempting to use a number that is not assigned to your account
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://httpstatuses.com/403
            title: Forbidden
            status: 403

    # Webhooks

  schemas:
    # Messaging
    MessageRequest:
      type: object
      description: The message you would like to send
      required:
        - to
        - from
        - channel
      properties:
        to:
          type: string
          description: |
            The message's recipient
            The format depends on the specific channel
          example: '+1233423454'
        from:
          type: string
          description: |
            The sender of the messages. The format depends on the specific channel.
          example: '+1233423454'
        channel:
          type: string
          description: The channel selected for delivery.
          example: sms
          items:
            type: string
            enum:
              - sms
              - whatsapp
              - wechat
              - viber
        overrides:
          $ref: '#/components/schemas/MessageRequestOverrides'
        context:
          type: string
          description: The context for this particular message
          maxLength: 125
        content:
          AnyValue: {}
      example:
        to: '+123234234'
        from: '545345345'
        channel: 'whatsapp'
        whatsapp:
          contentType: text
          text: A simple text message
    MessageRequestOverrides:
      type: object
      description: Overrides of defaults for this message
      properties:
        notificationCallbackUrl:
          type: string
          pattern: ^https:\/\/?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$
          description: |
            When present this url is used for sending the delivery notifications to your webhook.
            Can be used for debugging use cases or individual routings.
          example: https://en4u5fpprib5i.x.pipedream.net
    MessageResponse:
      type: object
      description: The response after the server has accepted the request
      required:
        - messageId
        - timestamp
      properties:
        messageId:
          type: string
          format: uuid
          description: Global Message Id reference
          example: 77185196-664a-43ec-b14a-fe97036c697f
        timestamp:
          type: string
          format: date-time
          description: Point in time when the API confirms that the message request was accepted

    # Shared
    Problem:
      type: object
      additionalProperties: true
      description: The problem object follows the RFC-7807 (https://tools.ietf.org/html/rfc7807)
      properties:
        type:
          description: A URI reference [RFC3986] that identifies the problem type
          example: https://docs.tyntec.com/problems/DataNotParseable
          type: string
        title:
          type: string
          example: Data given was not parseable
          description: A short, human-readable summary of the problem type.
        status:
          description: The HTTP status code (RFC7231, Section 6) generated by the origin server for this occurrence of the problem.
          type: number
          example: 400
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: |
            Unexpected end-of-input: expected close marker for Object (start marker at [Source: UNKNOWN; line: -1, column: -1) at [Source: UNKNOWN; line: 1, column: 97]

    # Webhooks

    ChannelResponse:
      type: object
      description: General channel configuration
      properties:
        channel:
          type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ChannelScopes'
        callback:
          $ref: '#/components/schemas/ChannelCallback'
        name:
          type: string
          maxLength: 256
      discriminator:
        propertyName: channel

    WhatsAppChannelResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ChannelResponse'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/PhoneNumberId'
          example:
            channel: whatsapp
            scopes:
              - messages:read
              - profile:read
              - callbacks:write
              - callbacks:read
            id:
              phoneNumber: '12341234'
            callback:
              callbackVersion: '2.11'
              inboundMessageUrl: https://your.server.com/inbound
              messageStatusUrl: https://your.server.com/status
              eventFilter:
                - MessageStatus::accepted
                - MessageStatus::delivered

    SMSChannelResponse:
      allOf:
        - $ref: '#/components/schemas/ChannelResponse'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/PhoneNumberId'
          example:
            channel: sms
            scopes:
              - messages:read
              - callbacks:write
              - callbacks:read
            id:
              phoneNumber: '12341234'
            callback:
              callbackVersion: '2.11'
              inboundMessageUrl: https://your.server.com/inbound
              messageStatusUrl: https://your.server.com/status
              eventFilter:
                - MessageStatus::accepted
                - MessageStatus::delivered

    ViberChannelResponse:
      allOf:
        - $ref: '#/components/schemas/ChannelResponse'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/ServiceId'
            config:
              $ref: '#/components/schemas/ViberChannelConfigs'
          example:
            channel: viber
            scopes:
              - messages:read
              - callbacks:write
              - callbacks:read
            id:
              serviceId: '1234'
            name: Your Company
            callback:
              callbackVersion: '2.11'
              inboundMessageUrl: https://your.server.com/inbound
              messageStatusUrl: https://your.server.com/status
              eventFilter:
                - MessageStatus::accepted
                - MessageStatus::delivered

    ChannelScopes:
      type: string
      description: Scopes available to a channel.
      enum:
        - channels:read
        - channels.telegram:write
        - channels.wechat:write
        - callbacks:read
        - callbacks:write
        - media:read
        - media:write
    ChannelCallback:
      type: object
      description: A configuration of callbacks to your system
      properties:
        callbackVersion:
          type: string
          description: The event version to be used.
          enum:
            - '2.11'
        inboundMessageUrl:
          type: string
          description: A webhook for events related to inbound messages
          pattern: '^https://.*'
          maxLength: 2000
        messageStatusUrl:
          type: string
          description: A webhook for events related to message status changes
          pattern: '^https://.*'
          maxLength: 2000
        eventFilter:
          type: array
          description: |
            A list of status events to listen to. If empty, all events are submitted.
          items:
            $ref: '#/components/schemas/EventTypes'
          minLength: 0
          default: []

    EventTypes:
      type: string
      description: Determines which kind of event is emitted by the API
      enum:
        - MessageStatus::accepted
        - MessageStatus::channelFailed
        - MessageStatus::deleted
        - MessageStatus::delivered
        - MessageStatus::failed
        - MessageStatus::seen
        - MessageStatus::unknown

    ViberChannelConfigs:
      type: object
      required:
        - serviceType
      properties:
        serviceType:
          type: string
          enum:
            - session
            - two-way
            - one-way

    #
    # Channel id specs
    #
    PhoneNumberId:
      type: object
      description: The definition of the Phone Number Id
      properties:
        phoneNumber:
          type: string
    ServiceId:
      type: object
      description: The definition of the Viber Service id
      properties:
        serviceId:
          type: string

  parameters:
    PhoneNumber:
      name: phone-number
      in: path
      required: true
      description: The phone number used for WhatsApp messaging
      schema:
        type: integer
        minLength: 4
        maxLength: 15
      example: 4923147790717

    ServiceId:
      name: service-id
      in: path
      required: true
      description: The Service ID used for a Viber Channel.
      schema:
        type: integer
        minLength: 4
        maxLength: 15
      example: 4923147790717
